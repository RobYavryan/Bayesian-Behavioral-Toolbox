import scipy.io as spio
import pymc as pm
import numpy as np
import pytensor as pt

NSubjects = 10 # replace with actual number of subjects
TrialStart = 1  
TrialEnd = 100  

sixtydata = spio.loadmat('dataForBayesianAnalysisEEG-VM')

y= sixtydata['aimingError'][:100,:10]
v= sixtydata['showCursor'] [:100,:10]
p= sixtydata['rotation'] [:100,:10]

v= pt.shared(v)
p= pt.shared(p)

def loop_fn(v, epsilon, eta, p, x, A, B):
    x_next = A * x - v * B * (x+epsilon+p) + eta
    return x_next

################################################################################################
coords = {
    "trials": np.arange(TrialStart, TrialEnd+1,step=1),
    "subjects": np.arange(1,NSubjects+1, step=1),
}
with pm.Model(coords=coords) as model:
    A1mu = pm.Normal('A1mu', mu=2, sigma=1)
    A1std = pm.Gamma('A1std', mu=2, sigma=1)
    B1mu = pm.Normal('B1mu', mu=-1, sigma=0.75)
    B1std = pm.Gamma('B1std', mu=2, sigma=1)

    A1 = pm.Normal('A1', mu=A1mu, sigma=A1std, dims="subjects")
    B1 = pm.Normal('B1', mu=B1mu, sigma=B1std, dims="subjects")
    A = pm.Deterministic('A', pm.math.invlogit(A1))
    B = pm.Deterministic('B', pm.math.invlogit(B1))

    q = pm.Gamma('q', mu=1, sigma=1, dims="subjects") # Same idea with mean around 1 or 2 and std around 1 or 2
    r = pm.Gamma('r', mu=4, sigma=1, dims="subjects") # Same idea mean around 10 and std aroung 5 or more

    epsilon =  pm.Normal('epsilon', mu=0, sigma=q, dims=["trials", "subjects"])
    eta = pm.Normal('eta', mu=0, sigma=r, dims=["trials", "subjects"])

    #v= pt.tensor.matrix(name= TrialEnd, dtype= 'float64')
    #p= pt.tensor.ones(TrialEnd, dtype='float64')
    

    # Initial state of x
    x_init = pm.Normal('x_init', mu=0.0, sigma=1, dims=["subjects"])

    # Pytensor scan function to replace the for-loop
    x, updates = pt.scan(fn=loop_fn,
                                   sequences=[v, epsilon, eta, p],
                                   outputs_info= x_init,
                                   non_sequences= [A, B],
                                   n_steps= 100)

    # Likelihood (sampling distribution) of observations
    y = pm.Deterministic('y', x+epsilon)

    # draw posterior samples
    trace = pm.sample(100, tune=1000)

pm.plot_posterior(trace) 
