import scipy.io as spio
import pymc as pm
import numpy as np
import pytensor as pt

NSubjects = 60 
TrialStart = 1  
TrialEnd = 900  

sixtydata = spio.loadmat('dataForBayesianAnalysisEEG-VM')

y= sixtydata['aimingError'][:TrialEnd,:NSubjects]
v= sixtydata['showCursor'] [:TrialEnd,:NSubjects]
p= sixtydata['rotation'] [:TrialEnd,:NSubjects]

v= pt.shared(v)
p= pt.shared(p)
y= pt.shared(y)

def loop_fn(v, epsilon, eta, p, x_init, A, B):
    y = x_init + epsilon #epsilon is execution noise
    x_next = A * x_init - v * B * (y+p) + eta #eta is planning noise
    return x_next

################################################################################################
coords = {
    "trials": np.arange(TrialStart, TrialEnd+1,step=1), #creates an array filled from 1 to 900
    "subjects": np.arange(1,NSubjects+1, step=1), #creates an array filled from 1 to 60
}
with pm.Model(coords=coords) as model:
    A1mu = pm.Normal('A1mu', mu=0, sigma=1)
    A1std = pm.Gamma('A1std', mu=2, sigma=1)
    B1mu = pm.Normal('B1mu', mu=0, sigma=0.75)
    B1std = pm.Gamma('B1std', mu=2, sigma=1)

    A1 = pm.Normal('A1', mu=A1mu, sigma=A1std, dims="subjects")
    B1 = pm.Normal('B1', mu=B1mu, sigma=B1std, dims="subjects")
    A = pm.Deterministic('A', pm.math.invlogit(A1))
    B = pm.Deterministic('B', pm.math.invlogit(B1))

    q = pm.Gamma('q', mu=1, sigma=1, dims="subjects") 
    r = pm.Gamma('r', mu=1, sigma=1, dims="subjects") 

    epsilon =  pm.Normal('epsilon', mu=0, sigma=q, dims=["trials", "subjects"]) #epsilon and eta are new for each trial
    eta = pm.Normal('eta', mu=0, sigma=r, dims=["trials", "subjects"])


    # Initial state of x
    x_init = pm.Normal('x_init', mu=0.0, sigma=1, dims=["subjects"]) 

    # Pytensor scan function
    x, updates = pt.scan(fn=loop_fn,
                                   sequences=[v, epsilon, eta, p],
                                   outputs_info= [dict(initial= x_init)],
                                   non_sequences= [A, B],
                                   n_steps= TrialEnd,
                                   strict= True,
                                   allow_gc= False)

    # Likelihood (sampling distribution) of observations
    likelihood = pm.Normal('y', x+epsilon, observed= y) #not sure about the x+epsilon definition, perhaps mu=x and sigma= epsilon is better

    # draw posterior samples
    trace = pm.sample(chains= 100, tune=1000, cores=6)
    
pm.plot_posterior(trace) 
